{"version":3,"file":"static/js/523.cf339fbe.chunk.js","mappings":"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","sources":["features/admin/blogs/AddBlog/RichTextEditor.tsx","shared/yup-validations/blog-validation/initialBlog.ts","shared/yup-validations/blog-validation/blogYupValidation.ts","features/admin/blogs/AddBlog/AddBlog.tsx","services/BlogService.ts"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport BolgModel from \"../../../../shared/models/blogModel\";\r\n\r\ninterface IRichTextEditorProps {\r\n  setValue: Function;\r\n  formData: BolgModel;\r\n}\r\n\r\nconst RichTextEditor: React.FunctionComponent<IRichTextEditorProps> = ({\r\n  setValue,\r\n  formData,\r\n}) => {\r\n  const editor = React.useRef(null);\r\n  const [joditData, setJoditData] = useState<any>(\"\");\r\n\r\n  const sendValue = (content: any) => {\r\n    setValue({ ...formData, richText: joditData });\r\n  };\r\n\r\n  useEffect(() => {\r\n    sendValue(joditData);\r\n  }, [joditData]);\r\n\r\n  useEffect(() => {\r\n    setJoditData(formData?.richText);\r\n  }, [formData?.richText]);\r\n\r\n  return (\r\n    <JoditEditor\r\n      ref={editor}\r\n      onChange={(content) => {\r\n        // sendValue(content);\r\n        setJoditData(content);\r\n      }}\r\n      value={joditData}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RichTextEditor;\r\n","import BolgModel from \"../../models/blogModel\";\r\n\r\nconst defineInitialBlog = ({\r\n  has_id = false,\r\n  hasBlogId = false,\r\n  hasTitle = false,\r\n  hasRichText = false,\r\n  hasSeoTitle = false,\r\n  hasMetaDescription = false,\r\n  hasFocusKeyphrases = false,\r\n  hasSlug = false,\r\n  hasCategories = false,\r\n  hasTags = false,\r\n  hasImage = false,\r\n  hasBlogStatus = false,\r\n  hasCreationDate = false,\r\n}) => {\r\n  const initialBlog: BolgModel = {};\r\n\r\n  if (has_id) initialBlog._id = \"\";\r\n  if (hasBlogId) initialBlog.blogId = NaN;\r\n  if (hasTitle) initialBlog.title = \"\";\r\n  if (hasRichText) initialBlog.richText = \"\";\r\n  if (hasSeoTitle) initialBlog.seoTitle = \"\";\r\n  if (hasMetaDescription) initialBlog.metaDescription = \"\";\r\n  if (hasFocusKeyphrases) initialBlog.focusKeyphrases = \"\";\r\n  if (hasSlug) initialBlog.slug = \"\";\r\n  if (hasCategories) initialBlog.categories = [\"\"];\r\n  if (hasTags) initialBlog.tags = [\"\"];\r\n  if (hasImage) initialBlog.image = \"\";\r\n  if (hasBlogStatus) initialBlog.blogStatus = false;\r\n  if (hasCreationDate) initialBlog.creationDate = \"\";\r\n\r\n  return initialBlog;\r\n};\r\n\r\nexport default defineInitialBlog;\r\n","import * as yup from \"yup\";\r\nimport BolgModel from \"../../models/blogModel\";\r\n\r\nconst defineBlogYupSchema = ({\r\n  has_id = false,\r\n  hasBlogId = false,\r\n  hasTitle = false,\r\n  hasRichText = false,\r\n  hasSeoTitle = false,\r\n  hasMetaDescription = false,\r\n  hasFocusKeyphrases = false,\r\n  hasSlug = false,\r\n  hasCategories = false,\r\n  hasTags = false,\r\n  hasImage = false,\r\n  hasBlogStatus = false,\r\n}) => {\r\n  const initialBlog: any = {};\r\n\r\n  if (hasBlogId)\r\n    initialBlog.blogId = yup.number().required(\"Blob-Id is required\");\r\n  if (hasTitle) initialBlog.title = yup.string().required(\"Title is required\");\r\n  if (hasRichText)\r\n    initialBlog.richText = yup.string().required(\"Rich-text is required\");\r\n  if (hasSeoTitle)\r\n    initialBlog.seoTitle = yup.string().required(\"SEO title is required\");\r\n  if (hasMetaDescription)\r\n    initialBlog.metaDescription = yup\r\n      .string()\r\n      .required(\"Meta-Description is required\");\r\n  if (hasFocusKeyphrases)\r\n    initialBlog.focusKeyphrases = yup\r\n      .string()\r\n      .required(\"Focus-key-phrases is required\");\r\n  if (hasSlug) initialBlog.slug = yup.string().required(\"Slug is required\");\r\n  if (hasCategories)\r\n    initialBlog.categories = yup.array().required(\"Categories are required\");\r\n  if (hasTags) initialBlog.tags = yup.array().required(\"Tags are required\");\r\n  if (hasImage) initialBlog.image = yup.string().required(\"Image is required\");\r\n  if (hasBlogStatus)\r\n    initialBlog.blogStatus = yup.string().required(\"BlogStatus is required\");\r\n\r\n  return yup.object().shape(initialBlog);\r\n};\r\n\r\nexport default defineBlogYupSchema;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Container from \"@mui/material/Container\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport RichTextEditor from \"./RichTextEditor\";\r\nimport OpenInBrowserIcon from \"@mui/icons-material/OpenInBrowser\";\r\nimport TimerOutlinedIcon from \"@mui/icons-material/TimerOutlined\";\r\nimport FileUploadOutlinedIcon from \"@mui/icons-material/FileUploadOutlined\";\r\nimport { Formik } from \"formik\";\r\nimport defineInitialBlog from \"../../../../shared/yup-validations/blog-validation/initialBlog\";\r\nimport defineBlogYupSchema from \"../../../../shared/yup-validations/blog-validation/blogYupValidation\";\r\nimport BolgModel from \"../../../../shared/models/blogModel\";\r\nimport { errorToast, successToast } from \"../../../../ui/toast/Toast\";\r\nimport BlogService from \"../../../../services/BlogService\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface IAddBlogProps {}\r\n\r\ninterface customTouchedInterface {\r\n  category?: boolean;\r\n  keyPhases?: boolean;\r\n  tags?: boolean;\r\n}\r\n\r\nconst commonObj = {\r\n  hasTitle: true,\r\n  hasSeoTitle: true,\r\n  hasMetaDescription: true,\r\n  hasSlug: true,\r\n};\r\n\r\nconst initialBlog = defineInitialBlog({\r\n  ...commonObj,\r\n  hasFocusKeyphrases: true,\r\n  hasRichText: true,\r\n  hasCategories: true,\r\n  hasTags: true,\r\n  hasImage: true,\r\n});\r\nconst blogSchema = defineBlogYupSchema({ ...commonObj });\r\n\r\nconst AddBlog: React.FunctionComponent<IAddBlogProps> = (props) => {\r\n  //  touched state\r\n  const [customTouched, setCustomTouched] = useState<customTouchedInterface>({\r\n    category: false,\r\n    keyPhases: false,\r\n    tags: false,\r\n  });\r\n\r\n  //  touched state\r\n  const [customErrors, setCustomErrors] = useState<customTouchedInterface>({\r\n    category: false,\r\n    keyPhases: false,\r\n    tags: false,\r\n  });\r\n\r\n  // Image State\r\n  const [product, setProduct] = React.useState(\"\");\r\n  const [previewImage, setPreviewImage] = React.useState(\"\");\r\n\r\n  // Tags State\r\n  const [item, setItem] = React.useState<string>(\"\");\r\n  const [chipValue, setChipValue] = React.useState<string[]>([]);\r\n\r\n  // KeyPhrases\r\n  const [keyPhrase, setKeyPhrase] = React.useState<string>(\"\");\r\n  const [keyPhraseChipValue, setKeyPhraseChipValue] = React.useState<string[]>(\r\n    []\r\n  );\r\n\r\n  const { id } = useParams();\r\n\r\n  // Rich Text Editor State\r\n  const [cat, setCat] = useState(\"\");\r\n  const [showCategory, setShowCategory] = useState([\r\n    \"Destination\",\r\n    \"Place To Visit\",\r\n    \"Best Time To Travel\",\r\n    \"Experiance\",\r\n  ]);\r\n\r\n  // Form Data\r\n  const [formData, setFormData] = React.useState<BolgModel>({\r\n    title: \"\",\r\n    richText: \"\",\r\n    seoTitle: \"\",\r\n    metaDescription: \"\",\r\n    focusKeyphrases: \"\",\r\n    slug: \"\",\r\n    categories: [] as string[],\r\n    tags: [] as string[],\r\n    image: \"\",\r\n    creationDate: \"\",\r\n  });\r\n\r\n  const customHandleChange = (e: React.ChangeEvent<HTMLInputElement> | any) => {\r\n    const { name, value } = e?.target;\r\n\r\n    if (name == \"tags\") {\r\n      setItem(value);\r\n    } else if (name == \"focusKeyphrases\") {\r\n      setKeyPhrase(value);\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n  };\r\n\r\n  // Category\r\n  const handleCategory = (e: any) => {\r\n    const { name, checked } = e?.target;\r\n\r\n    const catArr: any = formData?.categories;\r\n\r\n    if (checked) {\r\n      !catArr.includes(name as string) && catArr.push(name as string);\r\n    } else {\r\n      const index = catArr.findIndex((val: any) => val == name);\r\n\r\n      index >= 0 && Array.isArray(catArr) && catArr.splice(index, 1);\r\n    }\r\n    setFormData({ ...formData, categories: catArr });\r\n  };\r\n\r\n  const addCategory = () => {\r\n    const value: string = cat;\r\n    const catArr = showCategory;\r\n\r\n    const flag = catArr\r\n      .filter((v) => v.toLowerCase())\r\n      .includes(value.toLowerCase());\r\n\r\n    if (!flag) {\r\n      setShowCategory([...showCategory, value]);\r\n    }\r\n    setCat(\"\");\r\n  };\r\n\r\n  // chip Add and keyPhrase chip Add method\r\n  const additem = (label: string) => {\r\n    let chipValueArr: string[] = [];\r\n    let chipVal = \"\";\r\n\r\n    if (label == \"tag\") {\r\n      chipValueArr = chipValue;\r\n      chipVal = item;\r\n    } else if (label == \"focusKeyphrases\") {\r\n      chipValueArr = keyPhraseChipValue;\r\n      chipVal = keyPhrase;\r\n    }\r\n\r\n    if (chipVal == \"\") return;\r\n    let newArr: any[] = [];\r\n\r\n    if (\r\n      !chipValueArr\r\n        .filter((value) => value.toLowerCase())\r\n        .includes(chipVal.toLowerCase())\r\n    )\r\n      newArr = [...chipValueArr, chipVal.toLowerCase()];\r\n    else newArr = chipValueArr;\r\n\r\n    if (label == \"tag\") {\r\n      setChipValue(newArr);\r\n      setItem(\"\");\r\n    } else if (label == \"focusKeyphrases\") {\r\n      setKeyPhraseChipValue(newArr);\r\n      setKeyPhrase(\"\");\r\n    }\r\n  };\r\n\r\n  // chip delete method\r\n  const handleTagChipDelete = (chip: any) => {\r\n    setChipValue(chipValue.filter((list) => list !== chip));\r\n  };\r\n\r\n  // keyPhrase chip delete method\r\n  const handleKeyPhraseChipDelete = (chip: any) => {\r\n    setKeyPhraseChipValue(keyPhraseChipValue.filter((list) => list !== chip));\r\n  };\r\n\r\n  // Image method\r\n  const handleImageChange = (e: any) => {\r\n    const file = e?.target?.files[0];\r\n    setProduct(file);\r\n    // convert image to base64\r\n    const render = new FileReader();\r\n\r\n    render.addEventListener(\r\n      \"load\",\r\n      () => {\r\n        // convert image file to base64 string\r\n        setPreviewImage(render.result as string);\r\n      },\r\n      false\r\n    );\r\n\r\n    if (file) {\r\n      render.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const customHandleBlur = (label: \"category\" | \"keyPhases\" | \"tags\") => {\r\n    if (!customTouched[label]) {\r\n      setCustomTouched({\r\n        ...customTouched,\r\n        [label]: true,\r\n      });\r\n      setCustomErrors({\r\n        ...customErrors,\r\n        [label]: true,\r\n      });\r\n    } else {\r\n      setCustomErrors({\r\n        ...customErrors,\r\n        [label]: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    id &&\r\n      BlogService.fetchOneBlog(id as string)\r\n        .then((res) => {\r\n          setFormData(res?.data?.data);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n  }, [id]);\r\n\r\n  console.log(\"formData :\", formData);\r\n\r\n  return (\r\n    <>\r\n      <Container sx={{ my: 3 }}>\r\n        <Grid container spacing={2} sx={{ pb: 2 }}>\r\n          <Grid item>\r\n            <Typography variant=\"h5\" sx={{ fontWeight: 500 }}>\r\n              Post\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"contained\">Add New</Button>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Formik\r\n          initialValues={initialBlog}\r\n          enableReinitialize\r\n          validationSchema={blogSchema}\r\n          onSubmit={(values, { resetForm }) => {\r\n            formData.tags = chipValue;\r\n            formData.creationDate = `${Date.now()}`;\r\n            formData.focusKeyphrases = keyPhraseChipValue?.join(\", \");\r\n\r\n            const fd = new FormData();\r\n\r\n            if (formData?.title) fd.append(\"title\", formData?.title as string);\r\n            if (formData?.richText)\r\n              fd.append(\"richText\", formData?.richText as string);\r\n            if (formData?.seoTitle)\r\n              fd.append(\"seoTitle\", formData?.seoTitle as string);\r\n            if (formData?.metaDescription)\r\n              fd.append(\"metaDescription\", formData?.metaDescription as string);\r\n            if (formData?.focusKeyphrases)\r\n              fd.append(\"focusKeyphrases\", formData?.focusKeyphrases as string);\r\n            if (formData?.slug) fd.append(\"slug\", formData?.slug as string);\r\n            if (formData?.creationDate)\r\n              fd.append(\"creationDate\", formData?.creationDate as string);\r\n            if (formData?.categories)\r\n              fd.append(\"categories\", JSON.stringify(formData?.categories));\r\n            if (formData?.tags)\r\n              fd.append(\"tags\", JSON.stringify(formData?.tags));\r\n            if (formData?.image) fd.append(\"image\", formData?.image as string);\r\n\r\n            BlogService.createBlog(fd)\r\n              .then((res) => {\r\n                const msg = res?.data?.message || \"Blog created successfully..\";\r\n                successToast(msg, 3000);\r\n                resetForm(initialBlog as any);\r\n              })\r\n              .catch((err) => {\r\n                console.error(err);\r\n                const msg =\r\n                  err?.response?.data?.message || \"Blog couldn't created..\";\r\n                errorToast(msg, 5000);\r\n              });\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            isValid,\r\n            touched,\r\n            handleBlur,\r\n            handleChange,\r\n            handleSubmit,\r\n          }) => {\r\n            return (\r\n              <form onSubmit={handleSubmit}>\r\n                <Paper elevation={3} sx={{ p: 4 }}>\r\n                  <Grid container spacing={4}>\r\n                    {/* --------------------------------left section-------------------------- */}\r\n                    <Grid item xs={12} md={8}>\r\n                      <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            id=\"title\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            label=\"Title\"\r\n                            fullWidth\r\n                            autoFocus\r\n                            value={formData?.title}\r\n                            name=\"title\"\r\n                            size=\"small\"\r\n                            required\r\n                            onChange={(e) => {\r\n                              handleChange(e);\r\n                              customHandleChange(e);\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            error={\r\n                              touched?.title && errors?.title ? true : false\r\n                            }\r\n                            helperText={\r\n                              touched?.title && errors?.title\r\n                                ? errors?.title\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <div>\r\n                            <RichTextEditor\r\n                              setValue={setFormData}\r\n                              formData={formData}\r\n                            />\r\n                          </div>\r\n                          <div\r\n                          // dangerouslySetInnerHTML={{ __html: formData?.richText }}\r\n                          />\r\n                          {/* <div>{formData?.richText}</div> */}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            id=\"seoTitle\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            label=\"SEO Title\"\r\n                            fullWidth\r\n                            value={formData?.seoTitle}\r\n                            name=\"seoTitle\"\r\n                            size=\"small\"\r\n                            required\r\n                            onChange={(e) => {\r\n                              handleChange(e);\r\n                              customHandleChange(e);\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            error={\r\n                              touched?.seoTitle && errors?.seoTitle\r\n                                ? true\r\n                                : false\r\n                            }\r\n                            helperText={\r\n                              touched?.seoTitle && errors?.seoTitle\r\n                                ? errors?.seoTitle\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            id=\"metaDescription\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            label=\"meta Description\"\r\n                            fullWidth\r\n                            value={formData?.metaDescription}\r\n                            name=\"metaDescription\"\r\n                            size=\"small\"\r\n                            required\r\n                            multiline\r\n                            rows={2}\r\n                            onChange={(e) => {\r\n                              handleChange(e);\r\n                              customHandleChange(e);\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            error={\r\n                              touched?.metaDescription &&\r\n                              errors?.metaDescription\r\n                                ? true\r\n                                : false\r\n                            }\r\n                            helperText={\r\n                              touched?.metaDescription &&\r\n                              errors?.metaDescription\r\n                                ? errors?.metaDescription\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <Grid container spacing={1}>\r\n                            <Grid item xs={10} md={10}>\r\n                              <TextField\r\n                                id=\"focusKeyphrases\"\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                label=\"Focus KeyPhrases\"\r\n                                name=\"focusKeyphrases\"\r\n                                size=\"medium\"\r\n                                value={keyPhrase}\r\n                                onChange={(e) => {\r\n                                  handleChange(e);\r\n                                  customHandleChange(e);\r\n                                }}\r\n                                onBlur={() =>\r\n                                  keyPhraseChipValue?.length <= 0 &&\r\n                                  keyPhrase == \"\" &&\r\n                                  customHandleBlur(\"keyPhases\")\r\n                                }\r\n                                error={\r\n                                  customTouched?.keyPhases &&\r\n                                  keyPhraseChipValue?.length <= 0\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                helperText={\r\n                                  keyPhraseChipValue?.length <= 0 &&\r\n                                  customErrors?.keyPhases\r\n                                    ? \"Focus-key-phrase required\"\r\n                                    : \"\"\r\n                                }\r\n                              />\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} textAlign=\"center\">\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                onClick={() => additem(\"focusKeyphrases\")}\r\n                                sx={{ backgroundColor: \"#27488d\" }}\r\n                              >\r\n                                Add\r\n                              </Button>\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <Box>\r\n                            {keyPhraseChipValue.map((chip, i) => {\r\n                              return (\r\n                                <Chip\r\n                                  sx={{\r\n                                    m: 1,\r\n                                    mx: \"5px\",\r\n                                    backgroundColor: \"#b3e4e4\",\r\n                                    // backgroundColor: \"#f7a61e40\",\r\n                                    color: \"#000\",\r\n                                    // color: \"#9b3600\",\r\n                                  }}\r\n                                  key={chip + i}\r\n                                  label={chip}\r\n                                  onDelete={(e) =>\r\n                                    handleKeyPhraseChipDelete(chip)\r\n                                  }\r\n                                />\r\n                              );\r\n                            })}\r\n                          </Box>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <TextField\r\n                            id=\"slug\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            label=\"Slug\"\r\n                            fullWidth\r\n                            value={formData?.slug}\r\n                            name=\"slug\"\r\n                            size=\"small\"\r\n                            required\r\n                            onChange={(e) => {\r\n                              handleChange(e);\r\n                              customHandleChange(e);\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            error={touched?.slug && errors?.slug ? true : false}\r\n                            helperText={\r\n                              touched?.slug && errors?.slug ? errors?.slug : \"\"\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* --------------------------------right section-------------------------- */}\r\n                    <Grid item xs={12} md={4}>\r\n                      <Grid container spacing={2}>\r\n                        {/* Category */}\r\n                        <Grid item xs={12} sm={6} md={12}>\r\n                          <Paper\r\n                            elevation={1}\r\n                            sx={{\r\n                              borderRadius: 4,\r\n                              \"&:hover\": {\r\n                                boxShadow: \"0px 0px 20px -5px rgb(0 0 0 / 50%)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            <Grid\r\n                              container\r\n                              sx={{\r\n                                flexDirection: \"column\",\r\n                                justifyContent: \"space-evenly\",\r\n                                alignItems: \"center\",\r\n                                p: 2,\r\n                              }}\r\n                              spacing={1}\r\n                            >\r\n                              <Grid item xs={12}>\r\n                                <Grid container spacing={1}>\r\n                                  <Grid item xs={9}>\r\n                                    <TextField\r\n                                      id=\"categoryAd\"\r\n                                      variant=\"outlined\"\r\n                                      type=\"text\"\r\n                                      label=\"Add Category\"\r\n                                      name=\"addCat\"\r\n                                      value={cat}\r\n                                      size=\"small\"\r\n                                      onChange={(e) => setCat(e?.target?.value)}\r\n                                      onBlur={() =>\r\n                                        formData?.categories &&\r\n                                        formData?.categories.length <= 0 &&\r\n                                        customHandleBlur(\"category\")\r\n                                      }\r\n                                      error={\r\n                                        customTouched?.category &&\r\n                                        formData?.categories &&\r\n                                        formData?.categories.length <= 0\r\n                                          ? true\r\n                                          : false\r\n                                      }\r\n                                      helperText={\r\n                                        formData?.categories &&\r\n                                        formData?.categories.length <= 0 &&\r\n                                        customErrors?.category\r\n                                          ? \"Categories are required\"\r\n                                          : \"\"\r\n                                      }\r\n                                    />\r\n                                  </Grid>\r\n                                  <Grid item xs={2}>\r\n                                    <Button\r\n                                      variant=\"contained\"\r\n                                      sx={{ backgroundColor: \"#27488d\" }}\r\n                                      onClick={addCategory}\r\n                                    >\r\n                                      Add\r\n                                    </Button>\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </Grid>\r\n                              <Grid item xs={12} alignSelf=\"start\">\r\n                                <FormControl\r\n                                  // sx={{ m: 2 }}\r\n                                  component=\"fieldset\"\r\n                                  variant=\"standard\"\r\n                                >\r\n                                  <FormLabel\r\n                                    component=\"legend\"\r\n                                    sx={{\r\n                                      fontSize: \"1.25rem\",\r\n                                      fontWeight: 500,\r\n                                    }}\r\n                                  >\r\n                                    Category\r\n                                  </FormLabel>\r\n                                  <FormGroup\r\n                                    onClick={(e) => {\r\n                                      handleCategory(e);\r\n                                    }}\r\n                                  >\r\n                                    {Array.isArray(showCategory) &&\r\n                                      showCategory.map((cat, i) => {\r\n                                        return (\r\n                                          <FormControlLabel\r\n                                            key={cat + \"\" + i}\r\n                                            control={\r\n                                              <Checkbox name={`${cat}`} />\r\n                                            }\r\n                                            label={cat}\r\n                                            sx={{\r\n                                              textTransform: \"capitalize\",\r\n                                            }}\r\n                                          />\r\n                                        );\r\n                                      })}\r\n                                  </FormGroup>\r\n                                </FormControl>\r\n                              </Grid>\r\n                            </Grid>\r\n                          </Paper>\r\n                        </Grid>\r\n                        {/* Tags */}\r\n                        <Grid item xs={12} sm={6} md={12}>\r\n                          <Paper\r\n                            elevation={1}\r\n                            sx={{\r\n                              borderRadius: 4,\r\n                              \"&:hover\": {\r\n                                boxShadow: \"0px 0px 20px -5px rgb(0 0 0 / 50%)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            <Box sx={{ p: 3 }}>\r\n                              <Grid container spacing={1}>\r\n                                <Grid item xs={9} md={9}>\r\n                                  <TextField\r\n                                    id=\"tags\"\r\n                                    variant=\"outlined\"\r\n                                    type=\"text\"\r\n                                    label=\"Tags\"\r\n                                    name=\"tags\"\r\n                                    size=\"small\"\r\n                                    value={item}\r\n                                    onChange={(e) => {\r\n                                      handleChange(e);\r\n                                      customHandleChange(e);\r\n                                    }}\r\n                                    onBlur={() =>\r\n                                      chipValue?.length <= 0 &&\r\n                                      item == \"\" &&\r\n                                      customHandleBlur(\"tags\")\r\n                                    }\r\n                                    error={\r\n                                      customTouched?.tags &&\r\n                                      chipValue?.length <= 0\r\n                                        ? true\r\n                                        : false\r\n                                    }\r\n                                    helperText={\r\n                                      chipValue?.length <= 0 &&\r\n                                      customTouched?.tags\r\n                                        ? \"Tags are required\"\r\n                                        : \"\"\r\n                                    }\r\n                                  />\r\n                                </Grid>\r\n                                <Grid item xs={3} md={3}>\r\n                                  <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() => additem(\"tag\")}\r\n                                    sx={{ backgroundColor: \"#27488d\" }}\r\n                                  >\r\n                                    Add\r\n                                  </Button>\r\n                                </Grid>\r\n                              </Grid>\r\n                              <Box>\r\n                                {chipValue.map((chip, i) => {\r\n                                  return (\r\n                                    <Chip\r\n                                      sx={{\r\n                                        m: 1,\r\n                                        mx: \"5px\",\r\n                                        backgroundColor: \"#b3e4e4\",\r\n                                        // backgroundColor: \"#f7a61e40\",\r\n                                        color: \"#000\",\r\n                                        // color: \"#9b3600\",\r\n                                      }}\r\n                                      key={chip + i}\r\n                                      label={chip}\r\n                                      onDelete={(e) =>\r\n                                        handleTagChipDelete(chip)\r\n                                      }\r\n                                    />\r\n                                  );\r\n                                })}\r\n                              </Box>\r\n                            </Box>\r\n                          </Paper>\r\n                        </Grid>\r\n                        {/* Image */}\r\n                        <Grid item xs={12}>\r\n                          <Paper\r\n                            elevation={1}\r\n                            sx={{\r\n                              borderRadius: 4,\r\n                              \"&:hover\": {\r\n                                boxShadow: \"0px 0px 20px -5px rgb(0 0 0 / 50%)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            <Grid container sx={{ p: 3 }}>\r\n                              <Grid item xs={12}>\r\n                                <Typography\r\n                                  variant=\"h6\"\r\n                                  textAlign=\"left\"\r\n                                  sx={{ mb: 2 }}\r\n                                >\r\n                                  Featured Image\r\n                                </Typography>\r\n                              </Grid>\r\n                              <Grid item xs={12}>\r\n                                <Box\r\n                                  sx={{\r\n                                    position: \"relative\",\r\n                                  }}\r\n                                >\r\n                                  <img\r\n                                    style={{\r\n                                      width: \"100%\",\r\n                                      border: \"1px solid #ececec\",\r\n                                      borderRadius: 10,\r\n                                    }}\r\n                                    src={\r\n                                      previewImage\r\n                                        ? previewImage\r\n                                        : \"/image-thumb.jpeg\"\r\n                                    }\r\n                                  />\r\n                                  <label htmlFor=\"image\">\r\n                                    <span\r\n                                      style={{\r\n                                        cursor: \"pointer\",\r\n                                        padding: \"0px 5px\",\r\n                                        position: \"absolute\",\r\n                                        top: 10,\r\n                                        right: 3,\r\n                                      }}\r\n                                    >\r\n                                      <FileUploadOutlinedIcon\r\n                                        sx={{\r\n                                          borderRadius: \"30%\",\r\n                                          color: \"#fff\",\r\n                                          backgroundColor: \"#27488d\",\r\n                                          p: \"5px\",\r\n                                        }}\r\n                                      />\r\n                                    </span>\r\n                                  </label>\r\n\r\n                                  <input\r\n                                    type=\"file\"\r\n                                    id=\"image\"\r\n                                    onChange={(e) => {\r\n                                      handleImageChange(e);\r\n                                      const file = e?.target?.files\r\n                                        ? e?.target?.files[0]\r\n                                        : \"\";\r\n                                      formData.image = file;\r\n                                    }}\r\n                                    style={{ display: \"none\" }}\r\n                                  />\r\n                                </Box>\r\n                              </Grid>\r\n                            </Grid>\r\n                          </Paper>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid>\r\n                    <span\r\n                      style={{\r\n                        cursor:\r\n                          formData?.title != \"\" &&\r\n                          keyPhraseChipValue?.length >= 0 &&\r\n                          formData?.categories &&\r\n                          formData?.categories?.length >= 0 &&\r\n                          chipValue?.length >= 0 &&\r\n                          formData?.image != \"\" &&\r\n                          formData?.richText != \"\"\r\n                            ? isValid\r\n                              ? \"not-allowed\"\r\n                              : \"default\"\r\n                            : \"default\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        size=\"large\"\r\n                        disabled={\r\n                          formData?.title != \"\" &&\r\n                          keyPhraseChipValue?.length >= 0 &&\r\n                          formData?.categories &&\r\n                          formData?.categories?.length >= 0 &&\r\n                          chipValue?.length >= 0 &&\r\n                          formData?.image != \"\" &&\r\n                          formData?.richText != \"\"\r\n                            ? isValid\r\n                              ? false\r\n                              : true\r\n                            : true\r\n                        }\r\n                        endIcon={<OpenInBrowserIcon />}\r\n                        sx={{ backgroundColor: \"#27488d\", mt: 2 }}\r\n                      >\r\n                        Publish\r\n                      </Button>\r\n                      {/* <Button\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        size=\"large\"\r\n                        disabled={\r\n                          formData?.title != \"\" &&\r\n                          keyPhraseChipValue?.length >= 0 &&\r\n                          formData?.categories &&\r\n                          formData?.categories?.length >= 0 &&\r\n                          chipValue?.length >= 0 &&\r\n                          formData?.image != \"\" &&\r\n                          formData?.richText != \"\"\r\n                            ? isValid\r\n                              ? false\r\n                              : true\r\n                            : true\r\n                        }\r\n                        endIcon={<TimerOutlinedIcon />}\r\n                        sx={{ backgroundColor: \"#f7a71e\" }}\r\n                      >\r\n                        Schedule\r\n                      </Button> */}\r\n                    </span>\r\n                  </Grid>\r\n                </Paper>\r\n              </form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddBlog;\r\n","import { AxiosResponse } from \"axios\";\r\nimport \"../api/index\";\r\nimport { API, endPoints } from \"../api/index\";\r\nimport BlogModel from \"../shared/models/blogModel\";\r\n\r\nclass BlogService {\r\n  static createBlog(blog: FormData | BlogModel): Promise<AxiosResponse> {\r\n    return API.post(endPoints.api.blog.create, blog);\r\n  } //createBlog\r\n\r\n  static updateBlog(\r\n    id: string,\r\n    blog: FormData | BlogModel\r\n  ): Promise<AxiosResponse> {\r\n    return API.put(endPoints.api.blog.update + id, blog);\r\n  } //updateBlog\r\n\r\n  static deleteBlog(id: string): Promise<AxiosResponse> {\r\n    return API.delete(endPoints.api.blog.delete + id);\r\n  } //deleteBlog\r\n\r\n  static fetchOneBlog(id: string): Promise<AxiosResponse> {\r\n    return API.get(endPoints.api.blog.getOne + id);\r\n  } //fetchOneBlog\r\n\r\n  static fetchAllBlogs(query = \"\"): Promise<AxiosResponse> {\r\n    return API.get(endPoints.api.blog.getAll);\r\n  } //fetchAllBlogs\r\n}\r\nexport default BlogService;\r\n"],"names":["setValue","formData","editor","React","useState","joditData","setJoditData","useEffect","richText","ref","onChange","content","value","has_id","hasBlogId","hasTitle","hasRichText","hasSeoTitle","hasMetaDescription","hasFocusKeyphrases","hasSlug","hasCategories","hasTags","hasImage","hasBlogStatus","hasCreationDate","initialBlog","_id","blogId","NaN","title","seoTitle","metaDescription","focusKeyphrases","slug","categories","tags","image","blogStatus","creationDate","yup","required","shape","commonObj","defineInitialBlog","blogSchema","defineBlogYupSchema","props","category","keyPhases","customTouched","setCustomTouched","customErrors","setCustomErrors","setProduct","previewImage","setPreviewImage","item","setItem","chipValue","setChipValue","keyPhrase","setKeyPhrase","keyPhraseChipValue","setKeyPhraseChipValue","id","useParams","cat","setCat","showCategory","setShowCategory","setFormData","customHandleChange","e","target","name","addCategory","filter","v","toLowerCase","includes","additem","label","chipValueArr","chipVal","newArr","customHandleBlur","BlogService","then","res","data","catch","err","console","error","log","Container","sx","my","Grid","container","spacing","pb","Typography","variant","fontWeight","Button","initialValues","enableReinitialize","validationSchema","onSubmit","values","resetForm","Date","now","join","fd","FormData","append","JSON","stringify","msg","message","successToast","response","errorToast","errors","isValid","touched","handleBlur","handleChange","handleSubmit","Paper","elevation","p","xs","md","TextField","type","fullWidth","autoFocus","size","onBlur","helperText","multiline","rows","length","textAlign","onClick","backgroundColor","Box","map","chip","i","Chip","m","mx","color","onDelete","list","handleKeyPhraseChipDelete","sm","borderRadius","boxShadow","flexDirection","justifyContent","alignItems","alignSelf","FormControl","component","FormLabel","fontSize","FormGroup","checked","catArr","push","index","findIndex","val","Array","isArray","splice","handleCategory","FormControlLabel","control","Checkbox","textTransform","handleTagChipDelete","mb","position","style","width","border","src","htmlFor","cursor","padding","top","right","FileUploadOutlined","file","files","render","FileReader","addEventListener","result","readAsDataURL","handleImageChange","display","disabled","endIcon","OpenInBrowser","mt","blog","API","endPoints"],"sourceRoot":""}